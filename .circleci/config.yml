# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      #- image: circleci/python:3.6.1
      #- image: circleci/node:7.10
      - image: circleci/node:10.10

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

        # My locally tested versions:
        # npm --version
        # 6.4.1
        # python --version
        # Python 2.7.12
        # source ifarms/bin/activate
        # python --versionPython 3.5.2
        # node --version  >/dev/null
        # v10.10.0


    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: update-npm
          command: |
              node --version
              python --version
              #sudo apt update &&
              sudo apt install python-pip
              sudo pip install virtualenv  # any way without sudo?
              sudo npm install -g npm@latest
              virtualenv --version
              pip --version
              /usr/local/bin/npm --version
              npm --version
      - restore_cache: # special step to restore the dependency cache
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "package.json" }}
          #key: dependency-cache-{{ checksum "package.json" }}

    #  # Download and cache dependencies
    #  - restore_cache:
    #      # keys:
    #      # - v1-dependencies-{{ checksum "requirements.txt" }}
    #      # # fallback to using the latest cache if no exact match is found
    #      # - v1-dependencies-
    #      key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "package.json" }}


      - run:
          name: install dependencies
          command: |
            # old:
            #python3 -m venv ifarms
            #. ifarms/bin/activate
            # #pip install -r requirements.txt
            #bin/reinstall.sh
                # new cleaner
                ./bin/preinstall.sh
                ./bin/reinstall.sh
                # # source ifarms/bin/activate   # not necessary because source is done in start_service.sh
                #./bin/start_service.sh &
                #./bin/test_api.sh
      - save_cache:
          paths:
            - ./ifarms
            - ./node_modules
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "package.json" }}

      # run tests!

      #- run: # run tests
      #    name: test
      #    command: npm test

      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      #        # activate ...
      #        # python manage.py test
      - run:
          name: run tests
          command: |
            #old
            #. ifarms/bin/activate
            ## python manage.py test
            #python tests/test.py
            #bin/test_api.sh
                #new:
                 # source ifarms/bin/activate   # not necessary because source is done in start_service.sh
                ./bin/start_service.sh &
                ./bin/test_api.sh

      - store_artifacts:
          path: test-reports
          destination: test-reports
